#!/usr/bin/env python3
"""
PHP Site Builder - Claude Orchestration Entry Point
This script is designed to be called from Claude to generate the final PHP website
after Claude has done all the analysis and content generation.
"""

import json
import sys
import argparse
from pathlib import Path
from datetime import datetime
import logging

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def generate_php_website(site_data_json: str, output_dir: str = None):
    """
    Generate PHP website from Claude-analyzed data

    Args:
        site_data_json: JSON string containing all site data from Claude's analysis
        output_dir: Optional output directory
    """
    try:
        # Parse the JSON data from Claude
        site_data = json.loads(site_data_json)

        # Create output directory
        if not output_dir:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            business_name = site_data['business_info']['name'].replace(' ', '_')
            output_dir = f"output/{business_name}_{timestamp}"

        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        # Save the structured data
        data_dir = output_path / 'data'
        data_dir.mkdir(exist_ok=True)

        # Save universal data
        universal_dir = data_dir / 'universal'
        universal_dir.mkdir(exist_ok=True)

        for key in ['business', 'navigation', 'contact', 'team', 'social']:
            if key in site_data:
                filepath = universal_dir / f"{key}.json"
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(site_data[key], f, indent=2, ensure_ascii=False)

        # Save page data
        pages_dir = data_dir / 'pages'
        pages_dir.mkdir(exist_ok=True)

        for page_name, page_data in site_data.get('pages', {}).items():
            filepath = pages_dir / f"{page_name}.json"
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(page_data, f, indent=2, ensure_ascii=False)

        # Generate PHP files
        from generator.php_generator import PHPGenerator
        php_gen = PHPGenerator()
        php_gen.generate(
            json_data={'universal': site_data, 'pages': site_data.get('pages', {})},
            output_dir=output_path
        )

        # Generate supporting files
        generate_readme(output_path, site_data['business_info']['name'])
        generate_router(output_path)

        print(f"SUCCESS: Website generated at {output_path}")
        return str(output_path)

    except Exception as e:
        logger.error(f"Error generating website: {e}")
        print(f"ERROR: {e}")
        return None


def generate_readme(output_dir: Path, business_name: str):
    """Generate README file"""
    readme_content = f"""# {business_name} Website

Generated by Claude PHP Site Builder

## Local Development

1. Start PHP server:
   ```
   php -S localhost:8000 router.php
   ```

2. Open browser to http://localhost:8000

## Deployment

Upload all files to your web server's public directory.

## Structure

- `/data/` - JSON data files
- `/assets/` - CSS, JS, images
- `/components/` - PHP components
- `*.php` - Page files
"""

    (output_dir / 'README.md').write_text(readme_content, encoding='utf-8')


def generate_router(output_dir: Path):
    """Generate router.php file"""
    router_content = '''<?php
// Simple router for PHP built-in server

$path = parse_url($_SERVER["REQUEST_URI"], PHP_URL_PATH);

// Remove trailing slash except for root
if ($path != '/' && substr($path, -1) == '/') {
    header("Location: " . rtrim($path, '/'));
    exit;
}

// Route to PHP files
if ($path == '/') {
    require 'index.php';
} else {
    $file = __DIR__ . $path . '.php';
    if (file_exists($file)) {
        require $file;
    } else {
        // Try without .php extension
        $file = __DIR__ . $path;
        if (file_exists($file)) {
            return false; // Serve the file as-is
        } else {
            require '404.php';
        }
    }
}
'''

    (output_dir / 'router.php').write_text(router_content, encoding='utf-8')


def main():
    parser = argparse.ArgumentParser(description='Generate PHP website from Claude analysis')
    parser.add_argument('--data', required=True, help='JSON data from Claude analysis')
    parser.add_argument('--output', help='Output directory')

    args = parser.parse_args()

    # Generate the website
    result = generate_php_website(args.data, args.output)

    if result:
        print(f"Website generated successfully at: {result}")
        sys.exit(0)
    else:
        print("Failed to generate website")
        sys.exit(1)


if __name__ == "__main__":
    # Check if being called with JSON via stdin
    if not sys.stdin.isatty():
        # Read JSON from stdin
        site_data_json = sys.stdin.read()
        result = generate_php_website(site_data_json)
        if result:
            print(f"OUTPUT_DIR:{result}")
    else:
        # Use command line arguments
        main()