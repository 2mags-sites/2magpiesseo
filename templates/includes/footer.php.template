<!-- Footer -->
<footer class="footer">
    <div class="container">
        <div class="footer-grid">
            <!-- Add your footer columns here -->
            <div class="footer-column">
                <h4>Quick Links</h4>
                <ul>
                    <li><a href="/">Home</a></li>
                    <li><a href="/about.php">About</a></li>
                    <li><a href="/services.php">Services</a></li>
                    <li><a href="/contact.php">Contact</a></li>
                </ul>
            </div>
            <div class="footer-column">
                <h4>Contact Info</h4>
                <p><?php echo SITE_NAME; ?><br>
                <?php echo SITE_ADDRESS; ?><br>
                <br>
                Tel: <a href="tel:<?php echo str_replace(' ', '', SITE_PHONE); ?>"><?php echo SITE_PHONE; ?></a><br>
                Email: <a href="mailto:<?php echo SITE_EMAIL; ?>"><?php echo SITE_EMAIL; ?></a></p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; <?php echo date('Y'); ?> <?php echo SITE_NAME; ?>. All rights reserved. | <a href="/privacy-policy.php" style="color: inherit;">Privacy Policy</a></p>
        </div>
    </div>
</footer>

<!-- JavaScript -->
<script>
    // Mobile menu toggle
    function toggleMenu() {
        const menu = document.getElementById('navMenu');
        menu.classList.toggle('active');
    }

    // Close mobile menu when clicking outside
    document.addEventListener('click', function(event) {
        const menu = document.getElementById('navMenu');
        const toggle = document.querySelector('.nav-toggle');
        if (menu && toggle && !menu.contains(event.target) && !toggle.contains(event.target)) {
            menu.classList.remove('active');
        }
    });

    // FAQ Accordion functionality (for pages with FAQs)
    document.addEventListener('DOMContentLoaded', function() {
        const faqItems = document.querySelectorAll('.faq-item');

        if (faqItems.length > 0) {
            faqItems.forEach(item => {
                const question = item.querySelector('.faq-question');

                if (question) {
                    question.addEventListener('click', function() {
                        // Close other FAQ items
                        faqItems.forEach(otherItem => {
                            if (otherItem !== item && otherItem.classList.contains('active')) {
                                otherItem.classList.remove('active');
                            }
                        });

                        // Toggle current item
                        item.classList.toggle('active');
                    });
                }
            });
        }
    });

    <?php if (isAdminMode()): ?>
    // Admin Mode Functions
    let editedFields = {};

    // Make content editable
    document.addEventListener('DOMContentLoaded', function() {
        const editableElements = document.querySelectorAll('.editable-content');

        editableElements.forEach(element => {
            element.contentEditable = true;

            element.addEventListener('blur', function() {
                const field = this.getAttribute('data-field');
                const value = this.innerHTML;
                editedFields[field] = value;
            });
        });

        // Handle editable images
        const editableImages = document.querySelectorAll('.editable-image');

        editableImages.forEach(img => {
            img.style.cursor = 'pointer';
            img.style.border = '2px solid transparent';
            img.style.transition = 'border 0.3s ease';

            // Add hover effect
            img.addEventListener('mouseenter', function() {
                this.style.border = '2px dashed #2563eb';
            });

            img.addEventListener('mouseleave', function() {
                this.style.border = '2px solid transparent';
            });

            // Handle click to upload new image
            img.addEventListener('click', function() {
                const field = this.getAttribute('data-field');
                const placeholder = this.getAttribute('data-placeholder');
                const imgElement = this;

                // Create file input
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';

                input.onchange = function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        // Create FormData for upload
                        const formData = new FormData();
                        formData.append('image', file);
                        formData.append('field', field);

                        // Show loading state
                        imgElement.style.opacity = '0.5';

                        // Upload to server - MUST use .php extension
                        fetch('/admin-upload.php', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => {
                            // Check if response is ok
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.text(); // Get as text first to debug
                        })
                        .then(text => {
                            try {
                                return JSON.parse(text); // Try to parse as JSON
                            } catch (e) {
                                console.error('Response was not JSON:', text);
                                throw new Error('Invalid JSON response: ' + text);
                            }
                        })
                        .then(data => {
                            if (data.success) {
                                // Update image src with uploaded file URL
                                imgElement.src = data.file.url;
                                imgElement.style.opacity = '1';

                                // Store URL in editedFields for saving
                                editedFields[field] = data.file.url;

                                alert('Image uploaded! Click "Save Changes" to save permanently.');
                            } else {
                                alert('Upload failed: ' + data.message);
                                imgElement.style.opacity = '1';
                            }
                        })
                        .catch(error => {
                            alert('Upload error: ' + error);
                            imgElement.style.opacity = '1';
                        });
                    }
                };

                input.click();
            });
        });
    });

    // Edit Page SEO
    function editPageSEO() {
        const currentPage = window.location.pathname.replace('/', '').replace('.php', '') || 'index';

        // Get current meta values from the page
        const currentTitle = document.querySelector('title')?.textContent || '';
        const currentDescription = document.querySelector('meta[name="description"]')?.content || '';
        const currentKeywords = document.querySelector('meta[name="keywords"]')?.content || '';

        // Create modal HTML
        const modalHTML = `
            <div id="seo-modal" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 10001; display: flex; align-items: center; justify-content: center;">
                <div style="background: white; padding: 30px; border-radius: 8px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto;">
                    <h2 style="margin-top: 0; color: #333;">Edit Page SEO</h2>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #555;">Page Title</label>
                        <input type="text" id="seo-title" value="${currentTitle.replace(/"/g, '&quot;')}" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; box-sizing: border-box;">
                        <small style="color: #666;">Recommended: 50-60 characters</small>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #555;">Meta Description</label>
                        <textarea id="seo-description" rows="3" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; resize: vertical; box-sizing: border-box;">${currentDescription.replace(/"/g, '&quot;')}</textarea>
                        <small style="color: #666;">Recommended: 150-160 characters</small>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #555;">Keywords</label>
                        <input type="text" id="seo-keywords" value="${currentKeywords.replace(/"/g, '&quot;')}" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; box-sizing: border-box;">
                        <small style="color: #666;">Separate keywords with commas</small>
                    </div>

                    <div style="display: flex; gap: 10px; justify-content: flex-end;">
                        <button onclick="closeSEOModal()" style="background: #6b7280; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Cancel</button>
                        <button onclick="saveSEOChanges()" style="background: #10b981; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Save SEO</button>
                    </div>
                </div>
            </div>
        `;

        // Add modal to page
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }

    // Close SEO Modal
    function closeSEOModal() {
        const modal = document.getElementById('seo-modal');
        if (modal) {
            modal.remove();
        }
    }

    // Save SEO Changes
    function saveSEOChanges() {
        const title = document.getElementById('seo-title').value;
        const description = document.getElementById('seo-description').value;
        const keywords = document.getElementById('seo-keywords').value;

        // Add to editedFields
        editedFields['meta.title'] = title;
        editedFields['meta.description'] = description;
        editedFields['meta.keywords'] = keywords;

        // Update the page's actual meta tags for immediate preview
        document.title = title;
        const metaDescription = document.querySelector('meta[name="description"]');
        if (metaDescription) metaDescription.content = description;
        const metaKeywords = document.querySelector('meta[name="keywords"]');
        if (metaKeywords) metaKeywords.content = keywords;

        // Also update OG tags
        const ogTitle = document.querySelector('meta[property="og:title"]');
        if (ogTitle) ogTitle.content = title;
        const ogDescription = document.querySelector('meta[property="og:description"]');
        if (ogDescription) ogDescription.content = description;

        // Close modal
        closeSEOModal();

        alert('SEO settings updated! Remember to click "Save Changes" to save permanently.');
    }

    // Save all changes - MUST use .php extension
    function saveAllChanges() {
        if (Object.keys(editedFields).length === 0) {
            alert('No changes to save');
            return;
        }

        const currentPage = window.location.pathname.replace('/', '').replace('.php', '') || 'index';

        fetch('/admin-save.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                page: currentPage,
                fields: editedFields,
                csrf_token: document.querySelector('meta[name="csrf-token"]')?.content || ''
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Changes saved successfully!');
                editedFields = {};
            } else {
                alert('Error saving changes: ' + data.message);
            }
        })
        .catch(error => {
            alert('Error saving changes: ' + error);
        });
    }
    <?php endif; ?>
</script>

</body>
</html>